on: [push, pull_request]

name: Building Application
jobs:
  Uploading Release: 
    name: Release binary to github releases
    runs-on: [ubuntu-latest, windows-latest]
    needs: 'Building Project'
    steps:
    - name: Zipping Project
      id: zip-project
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        path: './Vulkan*'
        filename: 'release-${{ matrix.os }}.zip'
      
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Última atualização do projeto!
          Versão: ${{ github.commitish }}
        draft: false
        prerelease: false
    
    - name: Upload Release
      id: upload-release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: './release-${{ matrix.os }}.zip'
        asset_name: 'release-${{ matrix.os }}.zip'
        asset_content_type: application/zip

  Building Project:
    strategy:
      matrix:
        go-version: [1.17]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Go
      uses: actions/checkout@v2
    
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Downloading necessary libs
      if: ${{ matrix.os }} == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install libglfw3 libglfw3-dev libgl1-mesa-dev xorg-dev -y

    - name: Bulding application
      run: 'go build .'
    
    - name: Caching Application
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Caching Go
      uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
