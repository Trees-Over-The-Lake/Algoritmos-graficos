on: [push, pull_request]

name: Building Application
jobs:

  building-project:
    strategy:
      matrix:
        go-version: [1.17]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Go
      uses: actions/checkout@v2
    
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Downloading necessary libs for linux
      if: runner.os == 'Linux'
      run: sudo apt update && sudo apt install libglfw3 libglfw3-dev libgl1-mesa-dev xorg-dev -y
      shell: bash
        
    - name: Bulding application
      run: 'go build .'
  
    - name: Caching Go
      uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # Creating a Release in ubuntu   
    - name: Create Release
      if: runner.os == 'Linux'
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: Última atualização do projeto!
        draft: false
        prerelease: false
    
    # Uploading Linux Binary
    - name: Upload Release
      if: runner.os == 'Linux'
      id: upload-release-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: 'vulkan'
        asset_name: 'release-${{ runner.os }}.amd64'
        asset_content_type: application/octet-stream

    # Uploading Windows Binary
    - name: Get latest release
      if: runner.os == 'Windows'
      id: get-release-windows
      uses: joutvhu/get-release@v1
      with:
        latest: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload Release
      if: runner.os == 'Windows'
      id: upload-release-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get-release-windows.outputs.upload_url }}
        asset_path: 'vulkan.exe'
        asset_name: 'release-${{ runner.os }}-amd64.exe'
        asset_content_type: application/octet-stream

      # Uploading MacOS Binary
    - name: Get latest release
      if: runner.os == 'macOS'
      id: get-release-macos
      uses: joutvhu/get-release@v1
      with:
        latest: true
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload Release
      if: runner.os == 'macOS'
      id: upload-release-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get-release-macos.outputs.upload_url }}
        asset_path: 'vulkan'
        asset_name: 'release-${{ runner.os }}-amd64'
        asset_content_type: application/octet-stream